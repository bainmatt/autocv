[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 autocv authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/example-cv.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Build a CV using autocv","text":"{ install tar (put Readme) }","code":""},{"path":"/articles/example-cv.html","id":"data-prep","dir":"Articles","previous_headings":"","what":"Data prep","title":"Build a CV using autocv","text":"Let’s walk process end--end example using fake data. first step load data, can data() function since datasets using included autocv. Let’s now pre-processing get sections format can displayed R Markdown:","code":"# Load packages library(autocv)  library(glue) library(readxl) library(stringr) library(magrittr, warn.conflicts = FALSE) library(dplyr, warn.conflicts = FALSE)  # Load data and preprocess data(\"example_position_data\", package = \"autocv\") position_data <- example_position_data %>%   autocv::preprocess_entries(     style = \"markdown\",      order = \"reversed\",      bullet_style = \"-\"   )  data(\"example_skill_data\", package = \"autocv\") skill_data <- example_skill_data  data(\"example_contact_data\", package = \"autocv\") contact_data <- example_contact_data %>%    autocv::preprocess_contacts(., style = \"markdown\")  data(\"example_text_data\", package = \"autocv\") text_data <- example_text_data %>%    autocv::preprocess_text() name <- contact_data$address_text[contact_data$loc == \"name\"] role <- text_data$text[text_data$loc == \"title\"] bio <- text_data$text[text_data$loc == \"bio\"] suffix <- contact_data$address_text[contact_data$loc == \"title\"]  pic_text <- glue::glue_collapse(   contact_data[contact_data$loc == \"pic\",]$contact_text ) contact_text <- autocv::print_contact_info(   contact_data,    section = \"both\",    sep = \"\\n\" )"},{"path":"/articles/example-cv.html","id":"margin","dir":"Articles","previous_headings":"","what":"Margin","title":"Build a CV using autocv","text":"first element CV aside, contains contact information skills choose include right margin CV. print following header tell pagedown section starts:","code":"glue(\"# Aside\")"},{"path":"/articles/example-cv.html","id":"contact","dir":"Articles","previous_headings":"Margin","what":"Contact information","title":"Build a CV using autocv","text":"contact card … need following header: print contact card follows: City, ST myemail@outlook.com (999) 999-9999 Personal Website GitHub LinkedIn","code":"glue(\"## Contact {{#contact}}\") contact_text"},{"path":"/articles/example-cv.html","id":"download-link","dir":"Articles","previous_headings":"Margin","what":"Download link","title":"Build a CV using autocv","text":"may wish include link download … Download PDF","code":"# If `doctype` is html add link to download a pdf version if(params$doctype == \"HTML\"){   paste0(     \"[<i class='fas fa-download'><\/i> Download as a PDF]\",     \"(https://github.com/bainmatt/resume/main/bainmatt_resume.pdf)\"   ) %>%    glue::glue_collapse(sep = \"\\n\") }"},{"path":"/articles/example-cv.html","id":"skills","dir":"Articles","previous_headings":"Margin","what":"Skills","title":"Build a CV using autocv","text":"skills … may wish give sections headers: print corresponding skill bars follows:","code":"glue(\"## Skills\") autocv::build_skill_bars(filter(skill_data, core_tools == \"x\"))"},{"path":"/articles/example-cv.html","id":"datestamp","dir":"Articles","previous_headings":"Margin","what":"Datestamp","title":"Build a CV using autocv","text":"may wish include datestamp … Last updated 2024-08-03","code":"glue(\"Last updated on \", \"{Sys.Date()}\")"},{"path":"/articles/example-cv.html","id":"main-section","dir":"Articles","previous_headings":"","what":"Main section","title":"Build a CV using autocv","text":"print following header tell pagedown section starts:","code":"glue(\"# Main\")"},{"path":"/articles/example-cv.html","id":"title","dir":"Articles","previous_headings":"Main section","what":"Title","title":"Build a CV using autocv","text":"title …","code":"glue(\"## \", \"{name}, \", \"{suffix}\", \" {{#title}}\")"},{"path":"/articles/example-cv.html","id":"role","dir":"Articles","previous_headings":"Main section","what":"Role","title":"Build a CV using autocv","text":"role …","code":"glue(\"### \", \"{role}\")"},{"path":"/articles/example-cv.html","id":"bio","dir":"Articles","previous_headings":"Main section","what":"Bio","title":"Build a CV using autocv","text":"bio one-paragraph-long synopsis bring table ’re looking . example_skill_data() dataset includes two sections, single sentence: experience objective: experience statement. value statement.","code":"glue(\"{bio}\")"},{"path":"/articles/example-cv.html","id":"position-sections","dir":"Articles","previous_headings":"","what":"Position sections","title":"Build a CV using autocv","text":"remaining sections, ’ll see, printed way: First print header icon font-awesome library. print section using print_section() function.","code":""},{"path":"/articles/example-cv.html","id":"professional-experience","dir":"Articles","previous_headings":"Position sections","what":"Professional Experience","title":"Build a CV using autocv","text":"First print header: print content:","code":"glue(\"## Professional Experience \", \"{{data-icon='suitcase'}}\") autocv::print_section(position_data, \"work\", target = \"app\")"},{"path":"/articles/example-cv.html","id":"my-title-2","dir":"Articles","previous_headings":"Position sections > Professional Experience","what":"My Title 2","title":"Build a CV using autocv","text":"Institution Name City, ST Aug 2022 - Sep 2021 bullet point. second bullet point. third bullet point.","code":""},{"path":"/articles/example-cv.html","id":"my-title-1","dir":"Articles","previous_headings":"Position sections > Professional Experience","what":"My Title 1","title":"Build a CV using autocv","text":"Institution Name City, ST Aug 2021 - Jul 2018 bullet point. second bullet point. third bullet point.","code":""},{"path":"/articles/example-cv.html","id":"education","dir":"Articles","previous_headings":"Position sections","what":"Education","title":"Build a CV using autocv","text":"First print header: print content:","code":"glue(\"## Education \", \"{{data-icon='graduation cap' data-concise='true'}}\") autocv::print_section(position_data, \"education\", target = \"app\")"},{"path":"/articles/example-cv.html","id":"phd-degree-name","dir":"Articles","previous_headings":"Position sections > Education","what":"PhD, Degree Name","title":"Build a CV using autocv","text":"University Name City, ST Dec 2023 - Sep 2021","code":""},{"path":"/articles/example-cv.html","id":"msc-degree-name","dir":"Articles","previous_headings":"Position sections > Education","what":"MSc, Degree Name","title":"Build a CV using autocv","text":"University Name City, ST Aug 2020 - Sep 2018","code":""},{"path":"/articles/example-cv.html","id":"bsc-degree-name","dir":"Articles","previous_headings":"Position sections > Education","what":"BSc, Degree Name","title":"Build a CV using autocv","text":"University Name City, ST Apr 2018 - Sep 2014","code":""},{"path":"/articles/example-cv.html","id":"certifications","dir":"Articles","previous_headings":"Position sections","what":"Certifications","title":"Build a CV using autocv","text":"First print header: print content:","code":"glue(\"## Certifications \", \"{{data-icon='award' data-concise='true'}}\") autocv::print_section(position_data, \"certifications\", target = \"app\")"},{"path":"/articles/example-cv.html","id":"certificate-name-1-certificate","dir":"Articles","previous_headings":"Position sections > Certifications","what":"Certificate Name 1 [Certificate]","title":"Build a CV using autocv","text":"Institution Name Location Expected Jul 2024","code":""},{"path":"/articles/example-cv.html","id":"certificate-name-2-certificate","dir":"Articles","previous_headings":"Position sections > Certifications","what":"Certificate Name 2 [Certificate]","title":"Build a CV using autocv","text":"Institution Name Location Expected Jul 2024","code":""},{"path":"/articles/example-cv.html","id":"selected-projects","dir":"Articles","previous_headings":"Position sections","what":"Selected Projects","title":"Build a CV using autocv","text":"First print header: print content:","code":"glue(\"## Selected Projects \", \"{{data-icon='code-branch' data-conside='true'}}\") autocv::print_section(position_data, \"projects\", target = \"app\")"},{"path":"/articles/example-cv.html","id":"pkgname-documentation","dir":"Articles","previous_headings":"Position sections > Selected Projects","what":"pkgname [Documentation]","title":"Build a CV using autocv","text":"N/N/Present - Jan 2024 project purpose statement (Python, R, SciPy, SQL)","code":""},{"path":"/articles/example-cv.html","id":"project-name-github","dir":"Articles","previous_headings":"Position sections > Selected Projects","what":"Project Name [GitHub]","title":"Build a CV using autocv","text":"N/N/Present - Apr 2024 project purpose statement (Scikit-Learn, TensorFlow, SciPy, GitHub Actions)","code":""},{"path":"/articles/example-cv.html","id":"adding-position-sections","dir":"Articles","previous_headings":"","what":"Adding position sections","title":"Build a CV using autocv","text":"aren’t restricted particular sections. may wish change add modifying loc column position_data spreadsheet (see example_position_data() dataset reference). possible sections might wish include : Selected Publications Selected Writing Additional Information","code":""},{"path":"/articles/example-cv.html","id":"putting-it-together","dir":"Articles","previous_headings":"","what":"Putting it together","title":"Build a CV using autocv","text":"see finished product looks like, can: Copy/paste code block article R chunk within R Markdown notebook project directory Add following yaml knitr headers top document: Knit. resulting R Markdown notebook look like . Knitting give output .","code":"--- title: \"My resume\" output:   pagedown::html_resume:     self_contained: true params:   doctype: \"HTML\" --- knitr::opts_chunk$set(   results='asis',    echo = FALSE )"},{"path":"/articles/example-cv.html","id":"customization","dir":"Articles","previous_headings":"","what":"Customization","title":"Build a CV using autocv","text":"repository package also includes: Custom css stylesheets: inst/css/custom_resume.css inst/css/styles_html.css inst/css/styles_pdf.css apply styles, modify output field yaml block follows: sophisticated Excel spreadsheets housing resume data multiple sheets, guidelines conditional formatting help adhere : R/data/resume_data.xlsx R/data/cover_data.xlsx Convenience functions rendering resume: render_resume.R Equivalent tools creating resumes cover letters different formats. make tools, recommend clone files corresponding directories computer modify contents following files using ’ve covered : cv.Rmd R/data/resume_data.xlsx View complete example, custom CSS styling applied, . Alternatively, create resume cover letter different format, can try one following. option operates data files. concise LaTeX resume, need: inst/latex/preamble.tex (place custom CSS) resume.Rmd (place cv.Rmd) View example . plain text resume, need: plain_resume.R View example .","code":"output:   pagedown::html_resume:     css: ['inst/css/custom_resume.css', 'inst/css/styles_html.css', 'resume']     self_contained: true"},{"path":"/articles/example-cv.html","id":"diagnositics","dir":"Articles","previous_headings":"","what":"Diagnositics","title":"Build a CV using autocv","text":"One last note. building plain text resume, providing link job posting interest, running [], get various helpful diagnostics free, including breakdown skills, … . example, using fake job posting running [] example data used article, obtain following report, opens plain text file: [] Just make sure clone following files: [] ’s gist . Thanks Nick Strayer laying groundwork package.","code":""},{"path":"/articles/example-cv.html","id":"appendix-other-skills-formats","dir":"Articles","previous_headings":"","what":"Appendix: Other skills formats","title":"Build a CV using autocv","text":"format skills sections list bold headers preset separator character, little additional preparation: list can rendered : Programming: Python, R, SQL • Machine Learning: SciPy, Scikit-Learn, TensorFlow • DevOps: Git, GitHub Actions • : ML Pipelines, Data Modeling, CI/CD Pipelines, Bayesian Inference","code":"skill_list <- autocv::build_skill_list(   autocv::sort_skills(skill_data),    sep = \" • \",   separate_competencies = TRUE,   competencies_header = \"Other\" ) glue(\"{skill_list}\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Bain. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bain M (2024). autocv: Generate ATS- Web-Friendly Resume Documents Spreadsheets. R package version 0.0.1.","code":"@Manual{,   title = {autocv: Generate ATS- and Web-Friendly Resume Documents from Spreadsheets},   author = {Matthew Bain},   year = {2024},   note = {R package version 0.0.1}, }"},{"path":"/index.html","id":"autocv","dir":"","previous_headings":"","what":"Generate ATS- and Web-Friendly Resume Documents from Spreadsheets","title":"Generate ATS- and Web-Friendly Resume Documents from Spreadsheets","text":"autocv package provides simple, unified workflow constructing curriculum vitae (related job application documents) data stored spreadsheets.","code":""},{"path":"/index.html","id":"user-interface","dir":"","previous_headings":"","what":"User Interface","title":"Generate ATS- and Web-Friendly Resume Documents from Spreadsheets","text":"core user interface encapsulated following sequence commands: Build application directory. Given job interest, construct directory containing template data files folders required build tailored job application. Edit application data files. Open data files given job interest select information (sections, entries, skills, ordering) include exclude application. Render application documents. given job interest, use tailored data files generate requested application documents (plain text /PDF resume, PDF HTML curriculum vitae, cover letter, etc.). Check application keywords. Given term bank relevant job keywords well job posting application documents given job interest, extract keywords job application cross-check job posting.","code":""},{"path":"/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Generate ATS- and Web-Friendly Resume Documents from Spreadsheets","text":"Find documentation functions , along documentation additional functions included package developers may tweak extend functionality desired.","code":""},{"path":"/index.html","id":"data-files","dir":"","previous_headings":"","what":"Data files","title":"Generate ATS- and Web-Friendly Resume Documents from Spreadsheets","text":"Included package several template data files user modify reflect work experience, skills, application text, metadata job interest. core data files : example_skill_data: Contains … WIP. finish section","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate ATS- and Web-Friendly Resume Documents from Spreadsheets","text":"package CRAN. like use , can install directly GitHub running following console:","code":"remotes::install_github(\"bainmatt/autocv\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Generate ATS- and Web-Friendly Resume Documents from Spreadsheets","text":"Follow vignette autocv documentation get started. WIP. add disclaimer vignette (custom div) parts may date","code":""},{"path":"/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Generate ATS- and Web-Friendly Resume Documents from Spreadsheets","text":"project inspired Nick Strayer’s data-driven cv template (exemplar), extends pagedown html_resume template. inspiration design refinements borrowed Matt Leary’s resume repository (examplar). Thank creators projects.","code":""},{"path":"/reference/alert_file_created.html","id":null,"dir":"Reference","previous_headings":"","what":"Issue an alert that a file or folder has been created at the provided path. — alert_file_created","title":"Issue an alert that a file or folder has been created at the provided path. — alert_file_created","text":"alert_file_created issues alert file created. alert_folder_created issues alert folder created.","code":""},{"path":"/reference/alert_file_created.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Issue an alert that a file or folder has been created at the provided path. — alert_file_created","text":"","code":"alert_file_created(file, base_dir = \".\", action = \"\")  alert_folder_created(folder, base_dir = \".\", action = \"\")"},{"path":"/reference/alert_file_created.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Issue an alert that a file or folder has been created at the provided path. — alert_file_created","text":"file (string) absolute path file question. base_dir (string) path (abs relative) root output directory (defaults \".\", project root). action (string) text stating function reacts message (default empty string). folder absolute path directory question.","code":""},{"path":[]},{"path":"/reference/alert_opening.html","id":null,"dir":"Reference","previous_headings":"","what":"Issue an alert that a file or folder is opening from the provided path. — alert_opening","title":"Issue an alert that a file or folder is opening from the provided path. — alert_opening","text":"Issue alert file folder opening provided path.","code":""},{"path":"/reference/alert_opening.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Issue an alert that a file or folder is opening from the provided path. — alert_opening","text":"","code":"alert_opening(path, base_dir = \".\", action = \"\")"},{"path":"/reference/alert_opening.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Issue an alert that a file or folder is opening from the provided path. — alert_opening","text":"path absolute path file folder question.","code":""},{"path":[]},{"path":"/reference/alert_writing_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Notify the user of the directory being read from or written to. — alert_writing_to","title":"Notify the user of the directory being read from or written to. — alert_writing_to","text":"alert_writing_to gives base output folder files written. alert_reading_from gives base input folder files read.","code":""},{"path":"/reference/alert_writing_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Notify the user of the directory being read from or written to. — alert_writing_to","text":"","code":"alert_writing_to(folder)  alert_reading_from(folder)"},{"path":"/reference/alert_writing_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Notify the user of the directory being read from or written to. — alert_writing_to","text":"folder absolute path directory question.","code":""},{"path":[]},{"path":"/reference/append_skills_to_bullets.html","id":null,"dir":"Reference","previous_headings":"","what":"Append skills to a description field with matching index. — append_skills_to_bullets","title":"Append skills to a description field with matching index. — append_skills_to_bullets","text":"Append skills description field matching index.","code":""},{"path":"/reference/append_skills_to_bullets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append skills to a description field with matching index. — append_skills_to_bullets","text":"","code":"append_skills_to_bullets(   data,   ix,   use_abridged = FALSE,   omit_prefix = \"/\",   sort_appended = FALSE,   skill_set_sorted = NULL )"},{"path":[]},{"path":"/reference/as_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a file name given a folder path, base name, id, and extension. — as_filename","title":"Construct a file name given a folder path, base name, id, and extension. — as_filename","text":"Construct file name given folder path, base name, id, extension.","code":""},{"path":"/reference/as_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a file name given a folder path, base name, id, and extension. — as_filename","text":"","code":"as_filename(path, basename, ext, id = NA, sep = \"_\")"},{"path":[]},{"path":"/reference/autocv-package.html","id":null,"dir":"Reference","previous_headings":"","what":"autocv: Generate ATS- and Web-Friendly Resume Documents from Spreadsheets — autocv-package","title":"autocv: Generate ATS- and Web-Friendly Resume Documents from Spreadsheets — autocv-package","text":"autocv collection functions generating resume data stored spreadsheet. includes tools retrieving job postings web, analyzing key words, assessing resume based alignment key words. Spreadsheet templates provided conditional formatting evaluate quality content skills included resume. Functions spreadsheets generating cover letters, well HTML, PDF, LaTeX, plain text resumes, included. HTML version optimized long-form web-hosted CVs, LaTeX version optimized ATS compatibility.","code":""},{"path":"/reference/autocv-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"autocv: Generate ATS- and Web-Friendly Resume Documents from Spreadsheets — autocv-package","text":"Maintainer: Matthew Bain bainmatt@outlook.com","code":""},{"path":"/reference/autocv_resources.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the location of template data files on your system. — autocv_resources","title":"Find the location of template data files on your system. — autocv_resources","text":"Find location template data files system.","code":""},{"path":"/reference/autocv_resources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the location of template data files on your system. — autocv_resources","text":"","code":"autocv_resources(path = NULL, inst_dir = c(\"extdata\", \"templates\"))"},{"path":[]},{"path":"/reference/autocv_resources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the location of template data files on your system. — autocv_resources","text":"","code":"# Obtain a complete list of top-level resources included with autocv: autocv_resources() #> [1] \"css\"       \"latex\"     \"resources\"  # Obtain a complete list of resources included in the css/ directory: autocv_resources(\"css\") #> [1] \"custom_resume.css\" \"styles_html.css\"   \"styles_pdf.css\"     # Obtain a complete path to the custom_resume.css resource: autocv_resources(\"css/custom_resume.css\") #> [1] \"/home/runner/.cache/R/renv/library/autocv-e7350c3b/linux-ubuntu-jammy/R-4.4/x86_64-pc-linux-gnu/autocv/extdata/css/custom_resume.css\"  # Obtain a complete list of template files included with autocv: autocv_resources(inst_dir = \"templates\") #> [1] \"template_cover_data.xlsx\"  \"template_cv.Rmd\"           #> [3] \"template_job_metadata.yml\" \"template_resume.Rmd\"       #> [5] \"template_resume_data.xlsx\""},{"path":"/reference/build_app_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the file tree and data files for the present application. — build_app_directory","title":"Create the file tree and data files for the present application. — build_app_directory","text":"Create file tree data files present application.","code":""},{"path":"/reference/build_app_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the file tree and data files for the present application. — build_app_directory","text":"","code":"build_app_directory(app_df = construct_app_metadata(), open = TRUE)"},{"path":[]},{"path":"/reference/build_app_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the file tree and data files for the present application. — build_app_directory","text":"","code":"# Complete end-to-end example (build -> (edit) -> render -> check) ---------- in_tmp_env({   message(\"1. Building project directory...\")   build_base_directory()      data(example_job_metadata)   app_df <- construct_app_metadata(app_info = example_job_metadata)      message(\"\")   message(\"2. Building application...\")   build_app_directory(app_df = app_df, open = FALSE)      message(\"\")   message(\"3. Rendering application...\")   render_app(cover = FALSE, email = FALSE)      message(\"\")   message(\"4. Checking keywords...\")   report_df <- check_skills()   print(report_df) }) #> 1. Building project directory... #>  #> ── Setting project paths ─────────────────────────────────────────────────────── #>  #> Your current path is: /tmp/RtmpX43VSt/ #> Set your desired project path relative to your current path:  #>  #> You entered the path: /tmp/RtmpX43VSt/ #>  #> Setting your project root to: /tmp/RtmpX43VSt/ #> Created file .here in /tmp/RtmpX43VSt . Please start a new R session in the new project directory. #> ✔ Writing file: .Rprofile #> ✔ Writing file: mycv.Rproj #>  #> ℹ Writing to: ../../../../../../../tmp/RtmpX43VSt #>  #> ── Creating directory tree ───────────────────────────────────────────────────── #> ! Folder already exists: . (skipping)  #> ✔ Creating folder: R #> ✔ Creating folder: R/input #> ✔ Creating folder: R/output #> ✔ Creating folder: R/applications #>  #> ── Writing skeleton data files ───────────────────────────────────────────────── #> ✔ Writing file: R/input/resume_data.xlsx #> ✔ Writing file: R/input/cover_data.xlsx #> ✔ Writing file: R/input/job_metadata.yml #>  #> ── Writing resume-building notebooks ─────────────────────────────────────────── #> ✔ Writing file: resume.Rmd #> ✔ Writing file: cv.Rmd #>  #> 2. Building application... #>  #> ℹ Writing to: ../../../../../../../tmp/RtmpX43VSt/R/applications/2024-07-data-science/2024-08-03-01-company-name-data-scientist-AB #>  #> ── Creating directory tree ───────────────────────────────────────────────────── #> ✔ Creating folder: input #> ✔ Creating folder: output #>  #> ── Copying base data files into directory ────────────────────────────────────── #> ✔ Writing file: input/resume_data_AB.xlsx #> ✔ Writing file: input/cover_data_AB.xlsx #>  #> ── Writing application metadata ──────────────────────────────────────────────── #> ✔ Writing file: metadata_AB.yml #> ✔ Writing file: ../log.rds #>  #> ── Downloading job posting and building a skill report ───────────────────────── #> ✔ Writing file: input/posting_AB.txt #>  #> ── Keyword check: Posting vs job terms list ──────────────────────────────────── #> ✔ Writing file: output/keyword_counts_AB.csv #> # A tibble: 1 × 2 #>   term     matches #>   <chr>      <dbl> #> 1 Disabled       4 #>  #> ── Keyword check: Posting vs data terms list ─────────────────────────────────── #> ✔ Writing file: output/skill_counts_posting_AB.csv #> # A tibble: 55 × 2 #>    term                        matches #>    <chr>                         <dbl> #>  1 Data Science                     74 #>  2 Data Analysis                    15 #>  3 UX                                1 #>  4 Statistics                       29 #>  5 Cloud Computing                   4 #>  6 Insights                         10 #>  7 Survey Data                       1 #>  8 Algorithms                        4 #>  9 Unstructured Data                 2 #> 10 Domain Knowledge                  3 #> 11 Mathematics                       3 #> 12 Computer Science                  6 #> 13 Data-Driven                       3 #> 14 Statistical Knowledge             1 #> 15 Data Visualization                3 #> 16 Machine Learning                  8 #> 17 C                                 8 #> 18 Classification                    3 #> 19 Data Mining                       4 #> 20 Statistical Learning              3 #> 21 Data Collection                   1 #> 22 Big Data                         13 #> 23 Exploratory Data Analysis         2 #> 24 Data Management                   2 #> 25 Data Cleaning                     1 #> 26 Predictive Models                 3 #> 27 Models                            2 #> 28 Data-Driven Decisions             1 #> 29 Statistical Analysis              2 #> 30 Data Preprocessing                1 #> 31 Feature Engineering               1 #> 32 Model Selection                   1 #> 33 Implementation                    1 #> 34 Analytical Techniques             1 #> 35 Analytical                        1 #> 36 Large Datasets                    2 #> 37 Non-Technical Audiences           1 #> 38 Critical Thinking                 1 #> 39 Data-Driven Decision-Making       1 #> 40 Data Analytics                    1 #> 41 Cloud Services                    1 #> 42 Python                            1 #> 43 R                                 2 #> 44 Data Engineering                  1 #> 45 HTML                              4 #> 46 Statistical Modeling              1 #> 47 Causal Inference                  1 #> 48 Collaboration                     1 #> 49 Signal Processing                 1 #> 50 Spark                             1 #> 51 Spark SQL                         1 #> 52 Data Ethics                       1 #> 53 ETL                               1 #> 54 ELT                               1 #> 55 Developers                        1 #>  #> ✔ Opening: . #>  #> 3. Rendering application... #>  #> ── Building resume.txt ───────────────────────────────────────────────────────── #> ✔ Writing file: output/resume_yourname_AB.txt #>  #> ── Building resume.pdf ───────────────────────────────────────────────────────── #> ✔ Writing file: output/resume_yourname_AB.pdf #> ✔ All fields are up-to-date. Synchronizing metadata and log... #>  #> ! File already exists: metadata_AB.yml (overwriting)  #> ! File already exists: ../log.rds (updating entry for 'AB')  #> ! Package fontspec Error:  #> (fontspec)                The font \"Helvetica Neue\" cannot be found; this #> (fontspec)                may be but usually is not a fontspec bug. Either #> (fontspec)                there is a typo in the font name/file, the font is #> (fontspec)                not installed (correctly), or there is a bug in #> (fontspec)                the underlying font loading engine #> (fontspec)                (XeTeX/luaotfload). #> Error: LaTeX failed to compile /tmp/RtmpX43VSt//./R/applications/2024-07-data-science/2024-08-03-01-company-name-data-scientist-AB/output/resume_yourname_AB.tex. See https://yihui.org/tinytex/r/#debugging for debugging tips. See resume_yourname_AB.log for more info."},{"path":"/reference/build_base_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the file tree and necessary data files to begin building a resume. — build_base_directory","title":"Create the file tree and necessary data files to begin building a resume. — build_base_directory","text":"Create file tree necessary data files begin building resume.","code":""},{"path":"/reference/build_base_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the file tree and necessary data files to begin building a resume. — build_base_directory","text":"","code":"build_base_directory()"},{"path":[]},{"path":"/reference/build_base_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the file tree and necessary data files to begin building a resume. — build_base_directory","text":"","code":"in_tmp_env({   build_base_directory() }) #>  #> ── Setting project paths ─────────────────────────────────────────────────────── #>  #> Your current path is: /tmp/RtmpX43VSt/ #> Set your desired project path relative to your current path:  #>  #> You entered the path: /tmp/RtmpX43VSt/ #>  #> Setting your project root to: /tmp/RtmpX43VSt/ #> File .here already exists in /tmp/RtmpX43VSt #> ! File already exists: .Rprofile (skipping)  #> ! File already exists: mycv.Rproj (skipping)  #>  #> ℹ Writing to: ../../../../../../../tmp/RtmpX43VSt #>  #> ── Creating directory tree ───────────────────────────────────────────────────── #> ! Folder already exists: . (skipping)  #> ! Folder already exists: R (skipping)  #> ! Folder already exists: R/input (skipping)  #> ! Folder already exists: R/output (skipping)  #> ! Folder already exists: R/applications (skipping)  #>  #> ── Writing skeleton data files ───────────────────────────────────────────────── #> ! File already exists: R/input/resume_data.xlsx (skipping)  #> ! File already exists: R/input/cover_data.xlsx (skipping)  #> ! File already exists: R/input/job_metadata.yml (skipping)  #>  #> ── Writing resume-building notebooks ─────────────────────────────────────────── #> ! File already exists: resume.Rmd (skipping)  #> ! File already exists: cv.Rmd (skipping)"},{"path":"/reference/build_skill_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a bar chart of skills. — build_skill_bars","title":"Construct a bar chart of skills. — build_skill_bars","text":"Construct bar chart skills.","code":""},{"path":"/reference/build_skill_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a bar chart of skills. — build_skill_bars","text":"","code":"build_skill_bars(skill_data)"},{"path":"/reference/build_skill_bars.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Construct a bar chart of skills. — build_skill_bars","text":"Strayer N (2020). datadrivencv. R package version 0.1.0.","code":""},{"path":[]},{"path":"/reference/build_skill_bars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a bar chart of skills. — build_skill_bars","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(ggplot2) data(\"example_skill_data\", package = \"autocv\") technical_skills <- filter(example_skill_data, key_competency == \"x\") build_skill_bars(technical_skills)"},{"path":"/reference/build_skill_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Build skill list. — build_skill_list","title":"Build skill list. — build_skill_list","text":"Build skill list.","code":""},{"path":"/reference/build_skill_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build skill list. — build_skill_list","text":"","code":"build_skill_list(   skill_data,   sep = c(\" • \", \"\\n\"),   bullet_style = c(\"\", \"-\", \"+\"),   bold_headers = TRUE,   separate_competencies = TRUE,   competencies_header = \"Other\" )"},{"path":[]},{"path":"/reference/build_skill_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a two-column table of skills. — build_skill_table","title":"Build a two-column table of skills. — build_skill_table","text":"Returns string text can rendered LaTeX.","code":""},{"path":"/reference/build_skill_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a two-column table of skills. — build_skill_table","text":"","code":"build_skill_table(skill_data)"},{"path":"/reference/build_skill_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a two-column table of skills. — build_skill_table","text":"skill_data data frame containing skill data.","code":""},{"path":"/reference/build_skill_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a two-column table of skills. — build_skill_table","text":"LaTeX string.","code":""},{"path":[]},{"path":"/reference/build_skill_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a two-column table of skills. — build_skill_table","text":"","code":"# Define some data ---------------------------------------------------------- library(dplyr, warn.conflicts = FALSE) skill <- c(\"R\", \"SQL\", \"Excel\", \"Pandas\", \"Feature Engineering\") alias <- c(\"Coding\", \"Coding\", \"Data Analysis\", \"Data Analysis\", \"ML\") skill_data <- dplyr::bind_cols(alias, skill) #> New names: #> • `` -> `...1` #> • `` -> `...2` colnames(skill_data) <- c(\"alias\", \"skill\") print(skill_data) #> # A tibble: 5 × 2 #>   alias         skill               #>   <chr>         <chr>               #> 1 Coding        R                   #> 2 Coding        SQL                 #> 3 Data Analysis Excel               #> 4 Data Analysis Pandas              #> 5 ML            Feature Engineering   # Render -------------------------------------------------------------------- skill_table <- build_skill_table(skill_data) paste(skill_table) #> [1] \"\\\\begin{tabular}{@{}p{0.475\\\\linewidth}p{0.475\\\\linewidth}@{}}\\n\\\\textbf{Coding:} R, SQL&\\\\textbf{Data Analysis:} Excel, Pandas\\\\\\\\\\\\textbf{ML:} Feature Engineering&\\\\end{tabular}\\n\\n\"  # With a larger dataset ----------------------------------------------------- data(\"example_skill_data\", package = \"autocv\") skill_table <- build_skill_table(example_skill_data) paste(skill_table) #> [1] \"\\\\begin{tabular}{@{}p{0.475\\\\linewidth}p{0.475\\\\linewidth}@{}}\\n\\\\textbf{Programming:} R, SQL, Python, MATLAB, Bash&\\\\textbf{Machine Learning:} Beautiful Soup, NumPy, SciPy, Pandas, ArviZ, dplyr (R), Web Scraping, Data Preprocessing, SymPy, Exploratory Data Analysis, TensorFlow, Scikit-Learn, Keras, Feature Engineering, Hyperparameter Tuning, Model Optimization, Model Tuning, ML Pipelines, Supervised Learning, Unsupervised Learning, Dimensionality Reduction, Deep Learning, Reinforcement Learning, Neural Networks, Customer Segmentation, Decision Trees, Clustering, Manifold Learning, Classification, Model Selection\\\\\\\\\\\\textbf{NLP:} SpaCy, Hugging Face, LLMs, Topic Modeling, Transformer Models, Sentiment Analysis&\\\\textbf{Data Visualization:} Matplotlib, ggplot (R), Seaborn (Python), Tableau, Power BI\\\\\\\\\\\\textbf{Data Management:} Excel, NoSQL, Snowflake, PostgreSQL, MySQL, Cassandra, MongoDB, Data Modeling, Data Pipelines, Data Validation, Database Design, Data Warehouses, ETL, Dashboards, Business Intelligence, Microsoft Office Suite&\\\\textbf{Python Development:} MyPy, PyTest, Sphinx, Pydantic\\\\\\\\\\\\textbf{DevOps:} Git, GitHub Actions, Continuous Testing, CI/CD Pipelines, Object-Oriented Programming (OOP)&\\\\textbf{Big Data:} Databricks, Hadoop, Spark, Azure, Google Cloud Platform (GCP), Vertex AI\\\\\\\\\\\\textbf{MLOps:} Kubernetes, Docker, Model Deployment&\\\\textbf{Document Authoring:} LaTeX, Jupyter Notebooks, Google Colab, R Markdown, VSCode\\\\\\\\\\\\textbf{Web Development:} CSS, HTML, Javascript&\\\\textbf{Statistics:} Bayesian Inference, Hypothesis Testing, Statistical Learning, Probability Theory, Statistical Modeling, Convex Optimization, Time Series Analysis, Regression Analysis, Graph Theory, Causal Inference, Matrix Calculus, AB Testing, Applied Mathematics, Statistical Analysis, Inferential Statistics, Machine Learning, Mixture Models, Hierarchical Models, Multivariate Analysis\\\\\\\\\\\\textbf{Soft Skills:} Electroencephalography (EEG), Functional Magnetic Resonance Imaging (fMRI), Scientific Writing, Experimental Design, Critical Thinking, Documentation Writing&\\\\end{tabular}\\n\\n\""},{"path":"/reference/construct_app_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the metadata for a new application. — construct_app_metadata","title":"Create the metadata for a new application. — construct_app_metadata","text":"information also used construct application log entry.","code":""},{"path":"/reference/construct_app_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the metadata for a new application. — construct_app_metadata","text":"","code":"construct_app_metadata(app_info = load_job_info(open = TRUE))"},{"path":[]},{"path":"/reference/construct_app_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the metadata for a new application. — construct_app_metadata","text":"","code":"data(example_job_metadata) app_df <- construct_app_metadata(app_info = example_job_metadata) app_df_concise <- dplyr::select(app_df, -dplyr::ends_with(c(\"path\", \"url\"))) app_df_concise #>   id base_id               period      company       position recruiter_email #> 1 AB       / 2024-07-data-science Company Name Data Scientist               / #>   status date_created last_updated date_applied date_seq notes #> 1    ipr   2024-08-03   2024-08-03            /       01     /"},{"path":"/reference/copy_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy files and create folders from lists of source and target paths. — copy_files","title":"Copy files and create folders from lists of source and target paths. — copy_files","text":"copy_files copies files source corresponding target paths. create_folders creates folders given target paths.","code":""},{"path":"/reference/copy_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy files and create folders from lists of source and target paths. — copy_files","text":"","code":"copy_files(source_paths, target_paths, base_dir = \".\")  create_folders(target_paths, base_dir = \".\")"},{"path":"/reference/copy_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy files and create folders from lists of source and target paths. — copy_files","text":"source_paths char vector corresponding absolute source paths. target_paths char vector target paths. base_dir root folder report command line messages.","code":""},{"path":[]},{"path":"/reference/count_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Count keyword occurrences in a file based on a supplied list. — count_terms","title":"Count keyword occurrences in a file based on a supplied list. — count_terms","text":"Count keyword occurrences file based supplied list.","code":""},{"path":"/reference/count_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count keyword occurrences in a file based on a supplied list. — count_terms","text":"","code":"count_terms(   terms,   counts = NULL,   doc,   orderby = c(\"counts\", \"doc\", \"source\"),   filterby = c(\"both\", \"count\", \"matches\") )"},{"path":[]},{"path":"/reference/count_terms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count keyword occurrences in a file based on a supplied list. — count_terms","text":"","code":"# Load example data data(\"example_posting\", package = \"autocv\") terms <- readLines(autocv_resources(\"resources/skill_list.txt\"))  # Generate some random counts counts <- sample(0:10, length(prep_term_list(terms)), replace = TRUE)  posting_counts <- count_terms(   terms = terms,   counts = counts,   doc = example_posting,   orderby = \"doc\",   filterby = \"both\" ) posting_counts #> # A tibble: 23 × 3 #>    term                count matches #>    <chr>               <int>   <dbl> #>  1 XP                      4       3 #>  2 Product Managers        1       2 #>  3 UI                      8       1 #>  4 Data Science            5       3 #>  5 Decision-Making         3       1 #>  6 Analytical Thinking     4       1 #>  7 Analytical              1       2 #>  8 Business Decisions      8       1 #>  9 Experiments             6       2 #> 10 Analytic Frameworks     2       1 #> # ℹ 13 more rows"},{"path":"/reference/create_rprofile.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a default .Rprofile to a new project directory. — create_rprofile","title":"Write a default .Rprofile to a new project directory. — create_rprofile","text":"Write default .Rprofile new project directory.","code":""},{"path":"/reference/create_rprofile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a default .Rprofile to a new project directory. — create_rprofile","text":"","code":"create_rprofile(root_path = here::here())"},{"path":[]},{"path":"/reference/create_rproject.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a default .Rproject file to a new project directory and open. — create_rproject","title":"Write a default .Rproject file to a new project directory and open. — create_rproject","text":"Write default .Rproject file new project directory open.","code":""},{"path":"/reference/create_rproject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a default .Rproject file to a new project directory and open. — create_rproject","text":"","code":"create_rproject(root_path, project_name)"},{"path":[]},{"path":"/reference/create_rproject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a default .Rproject file to a new project directory and open. — create_rproject","text":"","code":"create_rproject(root_path = tempdir(), project_name = \"test_project\") #> ✔ Writing file: test_project.Rproj"},{"path":"/reference/download_webpage_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the text from a webpage url. — download_webpage_txt","title":"Save the text from a webpage url. — download_webpage_txt","text":"download_webpage_txt saves output .txt file. download_webpage_pdf saves output .pdf file.","code":""},{"path":"/reference/download_webpage_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the text from a webpage url. — download_webpage_txt","text":"","code":"download_webpage_txt(   url,   output_filepath = NA,   output_dir = \"input\",   output_filename = \"posting.txt\",   base_dir = \".\" )  download_webpage_pdf(   url,   output_filepath = NA,   output_dir = \"input\",   output_filename = \"posting.pdf\" )"},{"path":"/reference/download_webpage_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the text from a webpage url. — download_webpage_txt","text":"url web address job posting. output_file desired output filepath.","code":""},{"path":[]},{"path":"/reference/download_webpage_txt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the text from a webpage url. — download_webpage_txt","text":"","code":"library(rvest, warn.conflicts = FALSE) url <- \"https://en.wikipedia.org/wiki/R_(programming_language)\" fil <- tempfile(\"file\", tempdir(), fileext = \".txt\") download_webpage_txt(url, fil) #> ✔ Writing file: ../../../../../../../tmp/RtmpX43VSt/file9b9d26e99874.txt readLines(fil, n = 1) #> [1] \"R (programming language) - Wikipedia(function(){var className=\\\"client-js vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-sticky-header-disabled vector-feature-page-tools-pinned-disabled vector-feature-toc-pinned-clientpref-1 vector-feature-main-menu-pinned-disabled vector-feature-limited-width-clientpref-1 vector-feature-limited-width-content-enabled vector-feature-custom-font-size-clientpref-1 vector-feature-appearance-enabled vector-feature-appearance-pinned-clientpref-1 vector-feature-night-mode-enabled skin-theme-clientpref-day vector-toc-available\\\";var cookie=document.cookie.match(/(?:^|; )enwikimwclientpreferences=([^;]+)/);if(cookie){cookie[1].split('%2C').forEach(function(pref){className=className.replace(new RegExp('(^| )'+pref.replace(/-clientpref-\\\\w+$|[^\\\\w-]+/g,'')+'-clientpref-\\\\\\\\w+( |$)'),'$1'+pref+'$2');});}document.documentElement.className=className;}());RLCONF={\\\"wgBreakFrames\\\":false,\\\"wgSeparatorTransformTable\\\":[\\\"\\\",\\\"\\\"],\\\"wgDigitTransformTable\\\":[\"  unlink(fil)  url <- \"https://stat.ethz.ch/R-manual/R-devel/library/utils/html/download.file.html\" fil <- tempfile(\"file\", tempdir(), fileext = \".pdf\") download_webpage_pdf(url, fil) #> Error in force(expr): Failed to generate output in 5 seconds (timeout). unlink(fil)"},{"path":"/reference/example_skill_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example skill dataset — example_skill_data","title":"Example skill dataset — example_skill_data","text":"subset data ... Report ...","code":""},{"path":"/reference/example_skill_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example skill dataset — example_skill_data","text":"","code":"example_skill_data"},{"path":[]},{"path":"/reference/example_skill_data.html","id":"example-skill-data","dir":"Reference","previous_headings":"","what":"example_skill_data","title":"Example skill dataset — example_skill_data","text":"data frame x rows y columns: field Field description field 1, field 2 Field descriptions year Year","code":""},{"path":"/reference/example_skill_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example skill dataset — example_skill_data","text":"https://source","code":""},{"path":"/reference/find_matches_and_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the number and position of terms matching a given term in a given text. — find_matches_and_positions","title":"Find the number and position of terms matching a given term in a given text. — find_matches_and_positions","text":"Find number position terms matching given term given text.","code":""},{"path":"/reference/find_matches_and_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the number and position of terms matching a given term in a given text. — find_matches_and_positions","text":"","code":"find_matches_and_positions(term, text, ignore.case = TRUE)"},{"path":"/reference/find_matches_and_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the number and position of terms matching a given term in a given text. — find_matches_and_positions","text":"term string representing term matched. text string representing text check matches.","code":""},{"path":"/reference/find_matches_and_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the number and position of terms matching a given term in a given text. — find_matches_and_positions","text":"named list following elements: count Integer, number matches. first_ix Integer, position first match.","code":""},{"path":[]},{"path":"/reference/find_matches_and_positions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the number and position of terms matching a given term in a given text. — find_matches_and_positions","text":"","code":"text <- \"This is a sample text with several sample words.\" term <- \"sample\" find_matches_and_positions(term = term, text = text) #> $count #> [1] 2 #>  #> $positions #> [1] 11 36 #>"},{"path":"/reference/format_action.html","id":null,"dir":"Reference","previous_headings":"","what":"Format any 'action' text provided to a cli alert before printing. — format_action","title":"Format any 'action' text provided to a cli alert before printing. — format_action","text":"Format 'action' text provided cli alert printing.","code":""},{"path":"/reference/format_action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format any 'action' text provided to a cli alert before printing. — format_action","text":"","code":"format_action(action)"},{"path":[]},{"path":"/reference/get_app_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Access application metadata. — get_app_info","title":"Access application metadata. — get_app_info","text":"get_app_info retrieves requested info given application log. get_status_report returns table proportions status. get_app_path_to returns abs path doc given application.","code":""},{"path":"/reference/get_app_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access application metadata. — get_app_info","text":"","code":"get_app_info(   id = c(\"all\", \"latest\"),   field = \"all\",   status = c(\"all\", \"ipr\", \"applied\", \"interviewed\", \"rejected\",     \"interviewed_then_rejected\"),   app_period = \"latest\",   app_dir = \"applications\" )  get_status_report(app_period = \"latest\")  get_app_path_to(id = \"latest\", doc = \"resume\", app_period = \"latest\")"},{"path":[]},{"path":"/reference/get_latest_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the latest entry in an application log. — get_latest_entry","title":"Obtain the latest entry in an application log. — get_latest_entry","text":"Obtain latest entry application log.","code":""},{"path":"/reference/get_latest_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the latest entry in an application log. — get_latest_entry","text":"","code":"get_latest_entry(log = load_log())"},{"path":[]},{"path":"/reference/get_path_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an absolute path to a project directory for saving and loading. — get_path_to","title":"Construct an absolute path to a project directory for saving and loading. — get_path_to","text":"function constructs absolute path specified project directory. Directory paths, relative project root, defined user's .Rprofile environment variables.","code":""},{"path":"/reference/get_path_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an absolute path to a project directory for saving and loading. — get_path_to","text":"","code":"get_path_to(   dir = c(\"src\", \"input\", \"output\", \"applications\", \"notebooks\", \"templates\", \"css\",     \"latex\", \"resources\") )"},{"path":"/reference/get_path_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an absolute path to a project directory for saving and loading. — get_path_to","text":"dir (string) directory name.","code":""},{"path":"/reference/get_path_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct an absolute path to a project directory for saving and loading. — get_path_to","text":"","code":"get_path_to(\"src\") #> [1] \"/home/runner/work/autocv/autocv/./R\" get_path_to(\"templates\") #> [1] \"/home/runner/.cache/R/renv/library/autocv-e7350c3b/linux-ubuntu-jammy/R-4.4/x86_64-pc-linux-gnu/autocv/templates\""},{"path":"/reference/get_valid_opts.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a set of valid options for indexing a job log by a given argument. — get_valid_opts","title":"Obtain a set of valid options for indexing a job log by a given argument. — get_valid_opts","text":"Obtain set valid options indexing job log given argument.","code":""},{"path":"/reference/get_valid_opts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a set of valid options for indexing a job log by a given argument. — get_valid_opts","text":"","code":"get_valid_opts(log = load_log(), arg = c(\"id\", \"field\", \"doc\"))"},{"path":[]},{"path":"/reference/in_tmp_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Establish a temporary working tree for testing app-building functionality. — in_tmp_env","title":"Establish a temporary working tree for testing app-building functionality. — in_tmp_env","text":"function creates temporary autocv project directory working tree mirroring user's, defined .Rprofile file. temporary directory serves environment testing following application-building functionality: building applications rendering applications accessing application logs running application keyword checks","code":""},{"path":"/reference/in_tmp_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Establish a temporary working tree for testing app-building functionality. — in_tmp_env","text":"","code":"in_tmp_env(expr)"},{"path":[]},{"path":"/reference/in_tmp_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Establish a temporary working tree for testing app-building functionality. — in_tmp_env","text":"","code":"# Set temporary path environment variables ---------------------------------- in_tmp_env(message(\"Temporary root directory: \", Sys.getenv(\"ROOT\"))) #> Temporary root directory: /tmp/RtmpX43VSt message(\"Reset root directory: \", Sys.getenv(\"ROOT\")) #> Reset root directory: /home/runner/work/autocv/autocv  in_tmp_env(message(\"Temporary templates loc: \", get_path_to(\"templates\"))) #> Temporary templates loc: /home/runner/.cache/R/renv/library/autocv-e7350c3b/linux-ubuntu-jammy/R-4.4/x86_64-pc-linux-gnu/autocv/templates message(\"Reset templates loc: \", get_path_to(\"templates\")) #> Reset templates loc: /home/runner/.cache/R/renv/library/autocv-e7350c3b/linux-ubuntu-jammy/R-4.4/x86_64-pc-linux-gnu/autocv/templates  # Wrap multi-line expressions ----------------------------------------------- in_tmp_env({   x <- c(1, 2, 3)   for (i in x) {     print(i)   } }) #> [1] 1 #> [1] 2 #> [1] 3  # Handle input/output operations in the temporary environment --------------- in_tmp_env({   tmpdir <- get_path_to(\"input\")   if (!dir.exists(tmpdir)) {      dir.create(tmpdir, recursive = TRUE)    }      fil <- file.path(tmpdir, \"test.txt\")   con <- file(fil, open = \"w\")   writeLines(\"this is a test\", con = con)   close(con)      cat(paste0(\"In \", cli::col_blue(fil), \":\\n\", readLines(fil))) }) #> In /tmp/RtmpX43VSt/./R/input/test.txt: #> this is a test"},{"path":"/reference/load_application_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load application data. — load_application_data","title":"Load application data. — load_application_data","text":"Load application data.","code":""},{"path":"/reference/load_application_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load application data. — load_application_data","text":"","code":"load_application_data(   target = c(\"app\", \"base\"),   filename = c(\"resume_data.xlsx\", \"cover_data.xlsx\"),   sheet = c(\"entries\", \"skills\", \"contact_info\", \"text_blocks\"),   data_dir = \"input\",   app_id = \"latest\",   app_period = \"latest\" )"},{"path":[]},{"path":"/reference/load_job_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Read user-defined metadata for the present job. — load_job_info","title":"Read user-defined metadata for the present job. — load_job_info","text":"Read user-defined metadata present job.","code":""},{"path":"/reference/load_job_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read user-defined metadata for the present job. — load_job_info","text":"","code":"load_job_info(   field = \"all\",   filename = \"job_metadata.yml\",   dir = \"input\",   open = FALSE )"},{"path":"/reference/load_job_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read user-defined metadata for the present job. — load_job_info","text":"nested named list strings user-specified job details.","code":""},{"path":[]},{"path":"/reference/load_job_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read user-defined metadata for the present job. — load_job_info","text":"","code":"load_job_info(filename = \"template_job_metadata.yml\", dir = \"templates\") #> $name #> [1] \"Your Name\" #>  #> $period #> [1] \"2024-07-data-science\" #>  #> $id #> [1] \"AB\" #>  #> $base_id #> [1] \"/\" #>  #> $company #> [1] \"Company Name\" #>  #> $position #> [1] \"Data Scientist\" #>  #> $portal_url #> [1] \"/\" #>  #> $posting_url #> [1] \"https://en.wikipedia.org/wiki/Data_science\" #>  #> $linkedin_url #> [1] \"/\" #>  #> $recruiter_email #> [1] \"/\" #>  #> $notes #> [1] \"/\" #>"},{"path":"/reference/load_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the log for a given application period. — load_log","title":"Load the log for a given application period. — load_log","text":"Load log given application period.","code":""},{"path":"/reference/load_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the log for a given application period. — load_log","text":"","code":"load_log(app_period = \"latest\", app_dir = \"applications\")"},{"path":[]},{"path":"/reference/load_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load the log for a given application period. — load_log","text":"","code":"#"},{"path":"/reference/make_markdown_contacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare individual entry in contact info card. — make_markdown_contacts","title":"Prepare individual entry in contact info card. — make_markdown_contacts","text":"make_markdown_contacts prepares individual markdown entry. make_latex_contacts prepares individual LaTeX entry. make_txt_contacts prepares individual plain text entry.","code":""},{"path":"/reference/make_markdown_contacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare individual entry in contact info card. — make_markdown_contacts","text":"","code":"make_markdown_contacts(contact_data)  make_latex_contacts(contact_data, macro)  make_txt_contacts(contact_data)"},{"path":"/reference/make_markdown_contacts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare individual entry in contact info card. — make_markdown_contacts","text":"contact_data data frame containing contact data. macro desired LaTeX macro use rendering hyperlinks.","code":""},{"path":[]},{"path":"/reference/omit_hidden_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Omit spreadsheet entries beginning with a preset prefix. — omit_hidden_fields","title":"Omit spreadsheet entries beginning with a preset prefix. — omit_hidden_fields","text":"Omit spreadsheet entries beginning preset prefix.","code":""},{"path":"/reference/omit_hidden_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Omit spreadsheet entries beginning with a preset prefix. — omit_hidden_fields","text":"","code":"omit_hidden_fields(data, style = \"markdown\", prefix = \"/\")"},{"path":[]},{"path":"/reference/open_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Open, edit, and remove application documents. — open_app","title":"Open, edit, and remove application documents. — open_app","text":"open_app opens documents (resume, default) given application. edit_app opens spreadsheet data files given application editing. edit_base opens base spreadsheet data files editing. delete_app deletes application folder log entry given id.","code":""},{"path":"/reference/open_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open, edit, and remove application documents. — open_app","text":"","code":"open_app(doc = \"resume\", id = \"latest\", app_period = \"latest\")  edit_app(id = \"latest\", app_period = \"latest\")  edit_base()  delete_app(app_id, log = load_log())"},{"path":[]},{"path":"/reference/open_doc_and_wait.html","id":null,"dir":"Reference","previous_headings":"","what":"Open an application document and pause execution until a key is entered. — open_doc_and_wait","title":"Open an application document and pause execution until a key is entered. — open_doc_and_wait","text":"Open application document pause execution key entered.","code":""},{"path":"/reference/open_doc_and_wait.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open an application document and pause execution until a key is entered. — open_doc_and_wait","text":"","code":"open_doc_and_wait(path, base_dir = \".\", prompt = \"Enter y to continue: \")"},{"path":[]},{"path":"/reference/prep_term_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare raw strings and entries in a keyword list for analysis. — prep_term_list","title":"Prepare raw strings and entries in a keyword list for analysis. — prep_term_list","text":"Strip markdown characters, trailing whitespace, blank lines, unique lines supplied term list.","code":""},{"path":"/reference/prep_term_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare raw strings and entries in a keyword list for analysis. — prep_term_list","text":"","code":"prep_term_list(terms)"},{"path":"/reference/prep_term_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare raw strings and entries in a keyword list for analysis. — prep_term_list","text":"terms character vector containing keywords.","code":""},{"path":"/reference/prep_term_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare raw strings and entries in a keyword list for analysis. — prep_term_list","text":"character vector containing unique, processed keywords.","code":""},{"path":[]},{"path":"/reference/prep_term_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare raw strings and entries in a keyword list for analysis. — prep_term_list","text":"","code":"terms <- c(\"### ML\", \"\", \"#### Supervised Learning\", \"SVMs\", \"ML\") print(terms) #> [1] \"### ML\"                   \"\"                         #> [3] \"#### Supervised Learning\" \"SVMs\"                     #> [5] \"ML\"                        processed_terms <- prep_term_list(terms) print(processed_terms) #> [1] \"ML\"                  \"Supervised Learning\" \"SVMs\""},{"path":"/reference/prepare_bio.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare bio. — prepare_bio","title":"Prepare bio. — prepare_bio","text":"Prepare bio.","code":""},{"path":"/reference/prepare_bio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare bio. — prepare_bio","text":"","code":"prepare_bio(text_data, use_abridged = FALSE)"},{"path":"/reference/prepare_bio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare bio. — prepare_bio","text":"text_data spreadsheet containing resume text data.","code":""},{"path":[]},{"path":"/reference/prepare_description_bullets.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare entry descriptions. — prepare_description_bullets","title":"Prepare entry descriptions. — prepare_description_bullets","text":"Prepare entry descriptions.","code":""},{"path":"/reference/prepare_description_bullets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare entry descriptions. — prepare_description_bullets","text":"","code":"prepare_description_bullets(   data,   bullet_style = c(\"-\", \"+\"),   use_abridged = FALSE )"},{"path":[]},{"path":"/reference/prepare_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare properly formatted links with custom text. — prepare_links","title":"Prepare properly formatted links with custom text. — prepare_links","text":"Prepare properly formatted links custom text.","code":""},{"path":"/reference/prepare_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare properly formatted links with custom text. — prepare_links","text":"","code":"prepare_links(   data,   style = c(\"markdown\", \"latex\", \"txt\"),   macro = c(\"myhref\", \"href\", NA) )"},{"path":"/reference/prepare_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare properly formatted links with custom text. — prepare_links","text":"style style link, either \"markdown\", \"latex\", \"txt\" (plain) macro macro use \"latex\" references","code":""},{"path":[]},{"path":"/reference/prepare_timeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare dates. — prepare_timeline","title":"Prepare dates. — prepare_timeline","text":"Prepare dates.","code":""},{"path":"/reference/prepare_timeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare dates. — prepare_timeline","text":"","code":"prepare_timeline(   data,   order = c(\"chronological\", \"reversed\"),   style = c(\"markdown\", \"latex\", \"txt\") )"},{"path":"/reference/prepare_timeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare dates. — prepare_timeline","text":"data spreadsheet containing position data.","code":""},{"path":[]},{"path":"/reference/preprocess_contacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare contact info card. — preprocess_contacts","title":"Prepare contact info card. — preprocess_contacts","text":"Prepare contact info card.","code":""},{"path":"/reference/preprocess_contacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare contact info card. — preprocess_contacts","text":"","code":"preprocess_contacts(   contact_data,   style = c(\"markdown\", \"latex\", \"txt\"),   macro = c(\"myhref\", \"href\", NA) )"},{"path":[]},{"path":"/reference/preprocess_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"Run each resume data pre-processing step in sequence. — preprocess_entries","title":"Run each resume data pre-processing step in sequence. — preprocess_entries","text":"Run resume data pre-processing step sequence.","code":""},{"path":"/reference/preprocess_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run each resume data pre-processing step in sequence. — preprocess_entries","text":"","code":"preprocess_entries(   entry_data,   style = c(\"markdown\", \"latex\", \"txt\"),   order = c(\"chronological\", \"reversed\"),   bullet_style = c(\"-\", \"+\"),   use_abridged = FALSE,   sort_appended = FALSE,   skill_set_sorted = NULL )"},{"path":[]},{"path":"/reference/preprocess_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare text blocks. — preprocess_text","title":"Prepare text blocks. — preprocess_text","text":"Prepare text blocks.","code":""},{"path":"/reference/preprocess_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare text blocks. — preprocess_text","text":"","code":"preprocess_text(   text_data,   style = c(\"markdown\", \"latex\", \"txt\"),   use_abridged = FALSE )"},{"path":[]},{"path":"/reference/print_achievements.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the achievements listed in a text dataframe as bullet points. — print_achievements","title":"Print the achievements listed in a text dataframe as bullet points. — print_achievements","text":"Print achievements listed text dataframe bullet points.","code":""},{"path":"/reference/print_achievements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the achievements listed in a text dataframe as bullet points. — print_achievements","text":"","code":"print_achievements(text_data, bullet_style = c(\"-\", \"+\"))"},{"path":[]},{"path":"/reference/print_contact_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Print contact info. — print_contact_info","title":"Print contact info. — print_contact_info","text":"Print contact info.","code":""},{"path":"/reference/print_contact_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print contact info. — print_contact_info","text":"","code":"print_contact_info(   contact_data,   section = c(\"info\", \"links\", \"both\", \"signoff\"),   sep = c(\" | \", \"\\n\") )"},{"path":[]},{"path":"/reference/print_cover_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a cover letter from a text dataframe in a plain text or LaTeX style. — print_cover_body","title":"Print a cover letter from a text dataframe in a plain text or LaTeX style. — print_cover_body","text":"Print cover letter text dataframe plain text LaTeX style.","code":""},{"path":"/reference/print_cover_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a cover letter from a text dataframe in a plain text or LaTeX style. — print_cover_body","text":"","code":"print_cover_body(   text_data,   position,   company,   name = NULL,   style = c(\"latex\", \"txt\"),   use_bullets = FALSE,   bullet_style = c(\"-\", \"+\"),   type = c(\"cover\", \"email\") )"},{"path":[]},{"path":"/reference/print_cover_plain.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare and print each section of a plain text cover letter. — print_cover_plain","title":"Prepare and print each section of a plain text cover letter. — print_cover_plain","text":"Prepare print section plain text cover letter.","code":""},{"path":"/reference/print_cover_plain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare and print each section of a plain text cover letter. — print_cover_plain","text":"","code":"print_cover_plain(   position,   company,   app_id = \"latest\",   app_period = \"latest\",   use_bullets = FALSE,   bullet_style = c(\"-\", \"+\"),   type = c(\"cover\", \"email\") )"},{"path":[]},{"path":"/reference/print_latex_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a section from a position dataframe to LaTeX. — print_latex_section","title":"Print a section from a position dataframe to LaTeX. — print_latex_section","text":"Print section position dataframe LaTeX.","code":""},{"path":"/reference/print_latex_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a section from a position dataframe to LaTeX. — print_latex_section","text":"","code":"print_latex_section(   position_data,   section_id = c(\"work\", \"education\", \"certifications\", \"projects\", \"writing\",     \"publications\", \"volunteering\", \"additional_info\"),   short_entries = FALSE,   target = c(\"app\", \"base\"),   padding = 1 )"},{"path":[]},{"path":"/reference/print_resume_plain.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare and print each section of a plain text resume. — print_resume_plain","title":"Prepare and print each section of a plain text resume. — print_resume_plain","text":"Prepare print section plain text resume.","code":""},{"path":"/reference/print_resume_plain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare and print each section of a plain text resume. — print_resume_plain","text":"","code":"print_resume_plain(   target = c(\"app\", \"base\"),   app_id = \"latest\",   app_period = \"latest\",   use_abridged = FALSE,   sort_appended = FALSE )"},{"path":[]},{"path":"/reference/print_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a section from a position dataframe to markdown. — print_section","title":"Print a section from a position dataframe to markdown. — print_section","text":"Print section position dataframe markdown.","code":""},{"path":"/reference/print_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a section from a position dataframe to markdown. — print_section","text":"","code":"print_section(   position_data,   section_id = c(\"work\", \"education\", \"certifications\", \"projects\", \"writing\",     \"publications\", \"volunteering\", \"additional_info\"),   target = c(\"base\", \"app\") )"},{"path":[]},{"path":"/reference/print_txt_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a formatted plain text resume header. — print_txt_header","title":"Print a formatted plain text resume header. — print_txt_header","text":"Print formatted plain text resume header.","code":""},{"path":"/reference/print_txt_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a formatted plain text resume header. — print_txt_header","text":"","code":"print_txt_header(header)"},{"path":[]},{"path":"/reference/print_txt_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a formatted plain text resume header. — print_txt_header","text":"","code":"print_txt_header(\"this is my header\") #>  #>  #>  #> THIS IS MY HEADER #>  #> ================= #>  #>"},{"path":"/reference/print_txt_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Print sections of a plain text resume. — print_txt_section","title":"Print sections of a plain text resume. — print_txt_section","text":"Print sections plain text resume.","code":""},{"path":"/reference/print_txt_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print sections of a plain text resume. — print_txt_section","text":"","code":"print_txt_section(   position_data,   section_id = c(\"work\", \"education\", \"certifications\", \"projects\", \"writing\",     \"publications\", \"volunteering\", \"additional_info\"),   target = c(\"app\", \"base\") )"},{"path":[]},{"path":"/reference/render_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run each resume/CV rendering option in sequence. — render_app","title":"Run each resume/CV rendering option in sequence. — render_app","text":"render_app builds pdf plain text resume given application. render_base builds html CV, pdf plain text resume base data. render_linkedin builds short resume suitable professional profiles.","code":""},{"path":"/reference/render_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run each resume/CV rendering option in sequence. — render_app","text":"","code":"render_app(   app_id = \"latest\",   app_period = \"latest\",   cover = TRUE,   email = TRUE,   use_bullets = TRUE )  render_base(report_counts = TRUE)  render_linkedin(report_counts = TRUE)"},{"path":[]},{"path":"/reference/render_cover.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a cover letter based on spreadsheet data. — render_cover","title":"Construct a cover letter based on spreadsheet data. — render_cover","text":"render_cover constructs formal, LaTeX-style resume. render_cover_plain constructs plain text cover letter simplicity.","code":""},{"path":"/reference/render_cover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a cover letter based on spreadsheet data. — render_cover","text":"","code":"render_cover(   app_id = \"latest\",   app_period = \"latest\",   use_bullets = TRUE,   bullet_style = c(\"-\", \"+\"),   stylesheets = list(\"custom_cover.tex\"),   input_filename = \"cover.Rmd\",   output_basename = \"cover\",   app_dir = \"applications\",   input_dir = \"notebooks\",   data_dir = \"input\",   output_dir = \"output\" )  render_cover_plain(   app_id = \"latest\",   app_period = \"latest\",   use_bullets = TRUE,   bullet_style = c(\"-\", \"+\"),   type = c(\"cover\", \"email\"),   app_dir = \"applications\",   data_dir = \"input\",   output_dir = \"output\" )"},{"path":[]},{"path":"/reference/render_cv_as_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a curriculum vitae based on spreadsheet data. — render_cv_as_html","title":"Construct a curriculum vitae based on spreadsheet data. — render_cv_as_html","text":"render_cv_as_html constructs informal HTML-format resume. render_cv_as_pdf converts HTML-format resume PDF.","code":""},{"path":"/reference/render_cv_as_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a curriculum vitae based on spreadsheet data. — render_cv_as_html","text":"","code":"render_cv_as_html(   input_filename = \"cv.Rmd\",   output_basename = \"cv\",   input_dir = \"notebooks\",   data_dir = \"input\",   output_dir = \"output\",   stylesheets = list(\"custom_resume.css\", \"styles_html.css\"),   sort_appended = FALSE,   show = FALSE )  render_cv_as_pdf(   input_filename = \"cv.Rmd\",   output_basename = \"cv\",   input_dir = \"notebooks\",   data_dir = \"input\",   output_dir = \"output\",   stylesheets = list(\"custom_resume.css\", \"styles_pdf.css\"),   sort_appended = FALSE )"},{"path":[]},{"path":"/reference/render_resume.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a resume based on spreadsheet data. — render_resume","title":"Construct a resume based on spreadsheet data. — render_resume","text":"render_resume constructs formal, ATS-compatible, LaTeX-style resume.","code":""},{"path":"/reference/render_resume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a resume based on spreadsheet data. — render_resume","text":"","code":"render_resume(   target = c(\"app\", \"base\"),   app_id = \"latest\",   app_period = \"latest\",   stylesheets = list(\"custom_resume.tex\"),   input_filename = \"resume.Rmd\",   output_basename = \"resume\",   app_dir = \"applications\",   input_dir = \"notebooks\",   data_dir = \"input\",   output_dir = \"output\",   use_abridged = FALSE,   sort_appended = FALSE )  render_resume_plain(   target = c(\"app\", \"base\"),   app_id = \"latest\",   app_period = \"latest\",   output_basename = \"resume\",   app_dir = \"applications\",   data_dir = \"input\",   output_dir = \"output\",   use_abridged = FALSE,   sort_appended = FALSE )"},{"path":"/reference/render_resume.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a resume based on spreadsheet data. — render_resume","text":"render_resume_plain constructs plain text resume analysis.","code":""},{"path":[]},{"path":"/reference/render_resume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a resume based on spreadsheet data. — render_resume","text":"","code":"# TODO: just use templates & base"},{"path":"/reference/report_skill_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Display skill report info for at-a-glance viewing. — report_skill_metrics","title":"Display skill report info for at-a-glance viewing. — report_skill_metrics","text":"report_skill_metrics computes basic coverage statistics. sort_skill_report arranges rows convenient viewing order.","code":""},{"path":"/reference/report_skill_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display skill report info for at-a-glance viewing. — report_skill_metrics","text":"","code":"report_skill_metrics(skill_report_df)  sort_skill_report(skill_report_df)"},{"path":[]},{"path":"/reference/run_skill_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain keyword counts for a given doc/term list and generate reports. — run_skill_count","title":"Obtain keyword counts for a given doc/term list and generate reports. — run_skill_count","text":"run_skill_count returns keyword counts given document/term list. check_skills runs run_skill_count posting compares resume. count_terms_base returns keyword counts base resume.","code":""},{"path":"/reference/run_skill_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain keyword counts for a given doc/term list and generate reports. — run_skill_count","text":"","code":"run_skill_count(   app_id = \"latest\",   doc = c(\"posting\", \"resume\"),   term_list_filename = c(\"skill_list.txt\", \"keyword_list.txt\"),   term_list_dir = \"resources\",   log = load_log(),   orderby = c(\"counts\", \"doc\", \"source\"),   filterby = c(\"both\", \"count\", \"matches\"),   overwrite = FALSE,   is_posting_count = FALSE )  check_skills(   app_id = \"latest\",   app_period = \"latest\",   log = load_log(),   orderby = c(\"doc\", \"counts\", \"source\"),   overwrite = FALSE,   check_resume = TRUE )  count_terms_base(   input_dir = \"output\",   term_list_filename = \"skill_list.txt\",   term_list_dir = \"resources\",   orderby = c(\"counts\", \"doc\", \"source\"),   filterby = c(\"both\", \"count\", \"matches\"),   use_abridged = FALSE )"},{"path":[]},{"path":"/reference/run_skill_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a skill report for a given job application. — run_skill_report","title":"Generate a skill report for a given job application. — run_skill_report","text":"Generate skill report given job application.","code":""},{"path":"/reference/run_skill_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a skill report for a given job application. — run_skill_report","text":"","code":"run_skill_report(   app_id = \"latest\",   log = load_log(),   orderby = c(\"source\", \"counts\", \"doc\") )"},{"path":[]},{"path":"/reference/set_project_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Establish the root directory when building a new project. — set_project_paths","title":"Establish the root directory when building a new project. — set_project_paths","text":"Establish root directory building new project.","code":""},{"path":"/reference/set_project_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Establish the root directory when building a new project. — set_project_paths","text":"","code":"set_project_paths()"},{"path":[]},{"path":"/reference/sort_skills.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort and filter skills. — sort_skills","title":"Sort and filter skills. — sort_skills","text":"Sort filter skills.","code":""},{"path":"/reference/sort_skills.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort and filter skills. — sort_skills","text":"","code":"sort_skills(skill_data, target = c(\"app\", \"base\"), use_abridged = FALSE)"},{"path":[]},{"path":"/reference/str_to_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a string to a valid file name. — str_to_filename","title":"Convert a string to a valid file name. — str_to_filename","text":"Convert string valid file name.","code":""},{"path":"/reference/str_to_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a string to a valid file name. — str_to_filename","text":"","code":"str_to_filename(string, sep = \"-\", lower = TRUE)"},{"path":[]},{"path":"/reference/truncate_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorten long strings in a data frame for neater printing. — truncate_string","title":"Shorten long strings in a data frame for neater printing. — truncate_string","text":"Shorten long strings data frame neater printing.","code":""},{"path":"/reference/truncate_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorten long strings in a data frame for neater printing. — truncate_string","text":"","code":"truncate_string(str, max_length = 20)"},{"path":[]},{"path":"/reference/update_app_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Update application metadata. — update_app_info","title":"Update application metadata. — update_app_info","text":"Update log entry particular application well metadata file. update_app_info updates log metadata user-supplied data. update_datestamp auto-updates application datestamp upon rendering. apply_to sets date_applied datestamp status applied.","code":""},{"path":"/reference/update_app_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update application metadata. — update_app_info","text":"","code":"update_app_info(app_id = \"latest\", ..., log = load_log())  update_datestamp(app_id = \"latest\", log = load_log())  apply_to(app_id = \"latest\", log = load_log())"},{"path":"/reference/update_app_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update application metadata. — update_app_info","text":"... Key-value pairs fields update new values. none provided, log updated directly metadata file. id unique identifier associated application interest.","code":""},{"path":[]},{"path":"/reference/validate_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that matching job identifiers belong to the same job. — validate_id","title":"Verify that matching job identifiers belong to the same job. — validate_id","text":"Verify matching job identifiers belong job.","code":""},{"path":"/reference/validate_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that matching job identifiers belong to the same job. — validate_id","text":"","code":"validate_id(log = load_log(), app_df = construct_app_metadata())"},{"path":[]},{"path":"/reference/validate_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that the supplied status is valid. — validate_status","title":"Verify that the supplied status is valid. — validate_status","text":"Verify supplied status valid.","code":""},{"path":"/reference/validate_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that the supplied status is valid. — validate_status","text":"","code":"validate_status(   status = c(\"all\", \"ipr\", \"applied\", \"interviewed\", \"rejected\",     \"interviewed_then_rejected\", \"closed\"),   several.ok = FALSE )"},{"path":[]},{"path":"/reference/warn_file_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Issue a warning that a file or folder already exists at the provided path. — warn_file_exists","title":"Issue a warning that a file or folder already exists at the provided path. — warn_file_exists","text":"warn_file_exists issues warning file already exists. warn_folder_exists issues warning folder already exists.","code":""},{"path":"/reference/warn_file_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Issue a warning that a file or folder already exists at the provided path. — warn_file_exists","text":"","code":"warn_file_exists(file, base_dir = \".\", action = \"skipping\")  warn_folder_exists(folder, base_dir = \".\", action = \"skipping\")"},{"path":[]},{"path":"/reference/warn_file_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Issue a warning that a file or folder does not exist at the provided path. — warn_file_missing","title":"Issue a warning that a file or folder does not exist at the provided path. — warn_file_missing","text":"warn_file_missing issues warning file missing. warn_folder_missing issues warning folder missing.","code":""},{"path":"/reference/warn_file_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Issue a warning that a file or folder does not exist at the provided path. — warn_file_missing","text":"","code":"warn_file_missing(file, base_dir = \".\", action = \"aborting\")  warn_folder_missing(folder, base_dir = \".\", action = \"aborting\")"},{"path":[]},{"path":"/reference/write_app_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Store metadata for a new application. — write_app_metadata","title":"Store metadata for a new application. — write_app_metadata","text":"write_app_metadata saves metadata new application. write_log_entry records current app log present period.","code":""},{"path":"/reference/write_app_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store metadata for a new application. — write_app_metadata","text":"","code":"write_app_metadata(app_df = construct_app_metadata())  write_log_entry(app_df = construct_app_metadata())"},{"path":"/reference/write_app_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store metadata for a new application. — write_app_metadata","text":"app_df data frame containing metadata new job application (defaults value returned construct_app_metadata(), constructs new log entry base metadata yaml file). Fields must match log file current period.","code":""},{"path":[]},{"path":"/reference/write_app_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store metadata for a new application. — write_app_metadata","text":"","code":"data(example_job_metadata) app_df <- construct_app_metadata(app_info = example_job_metadata) # write_app_metadata(app_df = app_df)  # error: the folder doesn't exist  data(example_job_metadata) app_df <- construct_app_metadata(app_info = example_job_metadata) # write_log_entry(app_df = app_df)  # error: the folder doesn't exist"}]
